u = User.find_by(username: "{{ args_admin_username }}")
if u == nil
    puts "user {{ args_admin_username }} exists not"
    u = User.new(username: '{{ args_admin_username }}', email: '{{ args_admin_email }}', name: '{{ args_admin_fullname }}', password: '{{ args_admin_password }}', password_confirmation: '{{ args_admin_password }}')
    u.skip_confirmation!
    u.admin = true
    u.save!
    puts "user {{ args_admin_username }} created"
else
    puts "user {{ args_admin_username }} exists"
end

u = User.find_by(username: "{{ args_ansible_username }}")
if u == nil
    puts "user {{ args_ansible_username }} exists not"
    u = User.new(username: '{{ args_ansible_username }}', email: '{{ args_ansible_email }}', name: '{{ args_ansible_fullname }}', password: '{{ args_ansible_password }}', password_confirmation: '{{ args_ansible_password }}')
    u.skip_confirmation!
    u.admin = true
    u.save!
    puts "user {{ args_ansible_username }} created"
else
    puts "user {{ args_ansible_username }} exists"
end

t = PersonalAccessToken.find_by_token('{{ args_ansible_gitlab_token }}')
if t == nil
    puts "PAT exists not"
    user = User.find_by_username('{{ args_ansible_username }}')
    token = user.personal_access_tokens.create(scopes: ['api', 'admin_mode'], name: 'Automation token')
    token.set_token('{{ args_ansible_gitlab_token }}')
    token.save!
else
    puts "PAT exists"
end
